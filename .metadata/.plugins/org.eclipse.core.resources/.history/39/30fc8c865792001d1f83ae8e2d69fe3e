package org.zkoss.ZKHibernate.viewmodel;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.zkoss.bind.BindUtils;
import org.zkoss.bind.ValidationContext;
import org.zkoss.bind.Validator;
import org.zkoss.bind.annotation.AfterCompose;
import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.ContextParam;
import org.zkoss.bind.annotation.ContextType;
import org.zkoss.bind.annotation.NotifyChange;
import org.zkoss.bind.validator.AbstractValidator;
import org.zkoss.util.resource.Labels;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zk.ui.util.Clients;
import org.zkoss.zul.Button;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Listcell;
import org.zkoss.zul.Listitem;
import org.zkoss.zul.ListitemRenderer;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Paging;
import org.zkoss.zul.event.PagingEvent;


import org.zkoss.ZKHibernate.dao.MmobilDAO;
import org.zkoss.ZKHibernate.domain.Mmobil;
import org.zkoss.ZKHibernate.model.MmobilListModel;


public class MmobilVm {
	
	private org.zkoss.zk.ui.Session zkSession = Sessions.getCurrent();
	private Session session;
	private MmobilListModel model;
	private MmobilDAO oDao  = new MmobilDAO();
	
	private int pageStartNumber;
	private int pageTotalSize;
	private boolean needsPageUpdate;
	private String filter;
	private String orderby;
	private boolean isInsert;
	
	private Mmobil objForm;
	private String merekmobil;
	private String tipemobil;
	
	@Wire
	private Button btnSave;
	@Wire
	private Button btnCancel;
	@Wire
	private Button btnDelete;
	@Wire
	private Paging paging;
	@Wire
	private Listbox listbox;
	
	@NotifyChange("*")
	@AfterCompose
	public void afterCompose(@ContextParam(ContextType.VIEW) Component view) {
		Selectors.wireComponents(view, this, false);
		paging.addEventListener("onPaging", new EventListener<Event>() {
			
			@Override
			public void onEvent(Event event) throws Exception {
				PagingEvent pe = (PagingEvent) event;
				pageStartNumber = pe.getActivePage();
				//refreshmodel(pageStartNumber);
			}
			
		});
		
		needsPageUpdate = true;
		//doReset();
		
		if (listbox != null) {
			listbox.setItemRenderer(new ListitemRenderer<Mmobil>() {
				@Override
				public void render(Listitem item, final Mmobil data, int index) throws Exception {
					Listcell cell = new Listcell(String.valueOf(()))
				}
			});
		}
		
		
		
	}
	
	
	
	
	
	
	
}
